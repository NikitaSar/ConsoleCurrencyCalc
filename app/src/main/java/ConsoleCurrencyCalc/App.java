/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ConsoleCurrencyCalc;

import ConsoleCurrencyCalc.calculator.CurrencyCalc;
import ConsoleCurrencyCalc.calculator.coins.Coin;
import ConsoleCurrencyCalc.exchange.ExchangeService;
import ConsoleCurrencyCalc.exchange.FakeExchangedService;
import ConsoleCurrencyCalc.parsers.DollarParser;
import ConsoleCurrencyCalc.parsers.EuroParser;
import ConsoleCurrencyCalc.parsers.RubleParser;
import lombok.RequiredArgsConstructor;

import java.io.*;
import java.util.Arrays;
import java.util.Scanner;

@RequiredArgsConstructor
public class App {
    private final InputStream inputStream;
    private final OutputStream outputStream;
    private final CurrencyCalc calc;

    public void run() throws IOException {
        try(var scanner = new Scanner(inputStream)) {
            try (var writer = new OutputStreamWriter(outputStream)) {
                writer.write("Type formula and press enter. For exit ctrl + z.\n");
                writer.flush();
                String line = null;
                while (scanner.hasNextLine() && !(line = scanner.nextLine()).equals("")) {
                    try {
                        var res = calc.calculate(line);
                        writer.write(String.format("%s = %s\n", line, res.toString()));
                    }
                    catch (Exception e) {
                        writer.write(e.getMessage() + "\n");
                    }
                    finally {
                        writer.flush();
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        try {
            ExchangeService service = new FakeExchangedService();
            var currencies = service.getCurrencyRate();

            var calc = CurrencyCalc
                    .builder()
                    .parser(new DollarParser())
                    .parser(new RubleParser())
                    .parser(new EuroParser())
                    .customFunction("toDollar", (vars) -> {
                        var coin = vars[0];
                        if (coin.getSign() == '$')
                            return coin;
                        var rate = currencies.get(coin.getCode() + "USD");
                        return new Coin(coin.getVal() * rate, '$', "USD");
                    })
                    .customFunction("toRuble", (vars) -> {
                        var coin = vars[0];
                        if (coin.getSign() == 'p')
                            return coin;
                        var rate = currencies.get(coin.getCode() + "RUB");
                        return new Coin(coin.getVal() * rate, 'p', "RUB");
                    })
                    .customFunction("toEuro", (vars) -> {
                        var coin = vars[0];
                        if (coin.getSign() == 'e')
                            return coin;
                        var rate = currencies.get(coin.getCode() + "EUR");
                        return new Coin(coin.getVal() * rate, 'e', "EUR");
                    })
                    .customFunction("min", (vars) -> Arrays.stream(vars)
                            .reduce((var1, var2) -> var1.compareTo(var2) < 0 ? var1 : var2)
                            .orElse(null))
                    .build();
            new App(System.in, System.out, calc).run();
        }
        catch (Exception e) {
            System.out.println("Exception error.");
            System.out.println(e.getMessage());
        }
    }
}
